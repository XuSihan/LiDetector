copyright O
vladimir O
prus O
- O
. O
copyright O
dave O
abrahams O
- O
. O
copyright O
rene O
rivera O
- O
. O
copyright O
douglas O
gregor O
. O
distributed O
under O
the O
boost O
software O
license O
, O
version O
. O
. O
( O
see O
accompanying O
file O
license__ O
. O
txt O
or O
copy O
at O
http O
: O
//www O
. O
boost O
. O
org/license__ O
. O
txt O
) O
usage O
: O
b O
[ O
options O
] O
[ O
properties O
] O
[ O
installstage O
] O
builds O
and O
installs O
boost O
. O
targets O
and O
related O
options O
: O
install O
install O
headers O
and O
compiled O
library O
files O
to O
the O
configured O
locations O
( O
below O
) O
. O
--prefix<prefix> O
install O
architecture O
independent O
files O
here O
. O
default O
: O
c O
: O
\\boost O
on O
windows O
default O
: O
/usr/local O
on O
unix O
, O
linux O
, O
etc O
. O
--exec-prefix<eprefix> O
install O
architecture O
dependent O
files O
here O
. O
default O
: O
<prefix> O
--libdir<libdir> O
install O
library O
files O
here O
. O
default O
: O
<eprefix>/lib O
--includedir<hdrdir> O
install O
header O
files O
here O
. O
default O
: O
<prefix>/include O
--cmakedir<cmakedir> O
install O
cmake O
configuration O
files O
here O
. O
default O
: O
<libdir>/cmake O
--no-cmake-config O
do O
not O
install O
cmake O
configuration O
files O
. O
stage O
build O
and O
install O
only O
compiled O
library O
files O
to O
the O
stage O
directory O
. O
--stagedir<stagedir> O
install O
library O
files O
here O
default O
: O
. O
/stage O
other O
options O
: O
--build-type<type> O
build O
the O
specified O
pre-defined O
set O
of O
variations O
of O
the O
libraries O
. O
note O
, O
that O
which O
variants O
get O
built O
depends O
on O
what O
each O
library O
supports O
. O
-- O
minimal O
-- O
( O
default O
) O
builds O
a O
minimal O
set O
of O
variants O
. O
on O
windows O
, O
these O
are O
static O
multithreaded O
libraries O
in O
debug O
and O
release O
modes O
, O
using O
shared O
runtime O
. O
on O
linux O
, O
these O
are O
static O
and O
shared O
multithreaded O
libraries O
in O
release O
mode O
. O
-- O
complete O
-- O
build O
all O
possible O
variations O
. O
--build-dirdir O
build O
in O
this O
location O
instead O
of O
building O
within O
the O
distribution O
tree O
. O
recommended O
! O
--show-libraries O
display O
the O
list O
of O
boost O
libraries O
that O
require O
build O
and O
installation O
steps O
, O
and O
then O
exit O
. O
--layout<layout> O
determine O
whether O
to O
choose O
library O
names O
and O
header O
locations O
such O
that O
multiple O
versions O
of O
boost O
or O
multiple O
compilers O
can O
be O
used O
on O
the O
same O
system O
. O
-- O
versioned O
-- O
names O
of O
boost O
binaries O
include O
the O
boost O
version O
number O
, O
name O
and O
version O
of O
the O
compiler O
and O
encoded O
build O
properties O
. O
boost O
headers O
are O
installed O
in O
a O
subdirectory O
of O
<hdrdir> O
whose O
name O
contains O
the O
boost O
version O
number O
. O
-- O
tagged O
-- O
names O
of O
boost O
binaries O
include O
the O
encoded O
build O
properties O
such O
as O
variant O
and O
threading O
, O
but O
do O
not O
including O
compiler O
name O
and O
version O
, O
or O
boost O
version O
. O
this O
option O
is O
useful O
if O
you O
build O
several O
variants O
of O
boost O
, O
using O
the O
same O
compiler O
. O
-- O
system O
-- O
binaries O
names O
do O
not O
include O
the O
boost O
version O
number O
or O
the O
name O
and O
version O
number O
of O
the O
compiler O
. O
boost O
headers O
are O
installed O
directly O
into O
<hdrdir> O
. O
this O
option O
is O
intended O
for O
system O
integrators O
building O
distribution O
packages O
. O
the O
default O
value O
is O
\'versioned\' O
on O
windows O
, O
and O
\'system\' O
on O
unix O
. O
--buildidid O
add O
the O
specified O
id O
to O
the O
name O
of O
built O
libraries O
. O
the O
default O
is O
to O
not O
add O
anything O
. O
--python-buildidid O
add O
the O
specified O
id O
to O
the O
name O
of O
built O
libraries O
that O
depend O
on O
python O
. O
the O
default O
is O
to O
not O
add O
anything O
. O
this O
id O
is O
added O
in O
addition O
to O
--buildid O
. O
--help O
this O
message O
. O
--with-<library> O
build O
and O
install O
the O
specified O
<library> O
. O
if O
this O
option O
is O
used O
, O
only O
libraries O
specified O
using O
this O
option O
will O
be O
built O
. O
--without-<library> O
do O
not O
build O
, O
stage O
, O
or O
install O
the O
specified O
<library> O
. O
by O
default O
, O
all O
libraries O
are O
built O
. O
properties O
: O
toolsettoolset O
indicate O
the O
toolset O
to O
build O
with O
. O
variantdebugrelease O
select O
the O
build O
variant O
linkstaticshared O
whether O
to O
build O
static O
or O
shared O
libraries O
threadingsinglemulti O
whether O
to O
build O
single O
or O
multithreaded O
binaries O
runtime-linkstaticshared O
whether O
to O
link O
to O
static O
or O
shared O
c O
and O
c++ O
runtime O
. O
todo O
: O
- O
handle O
boost O
version O
- O
handle O
python O
options O
such O
as O
pydebug O
import O
boostcpp O
; O
import O
package O
; O
import O
sequence O
; O
import O
xsltproc O
; O
import O
set O
; O
import O
path O
; O
import O
link O
; O
import O
notfile O
; O
import O
virtual-target O
; O
import O
"class" O
: O
new O
; O
import O
property-set O
; O
import O
threadapi-feature O
; O
import O
option O
; O
backslash O
because O
of O
bcp O
--namespace O
import O
tools/boost\\_install/boost-install O
; O
path-constant O
boost_root O
: O
. O
; O
constant O
boost_version O
: O
. O
. O
; O
constant O
boost_jamroot_module O
: O
$ O
( O
__name__ O
) O
; O
allow O
subprojects O
to O
simply O
import O
config O
: O
requires O
; O
to O
get O
access O
to O
the O
requires O
rule O
modules O
. O
poke O
: O
boost_build_path O
: O
$ O
( O
boost_root O
) O
/libs/config/checks O
[ O
modules O
. O
peek O
: O
boost_build_path O
] O
; O
boostcpp O
. O
set-version O
$ O
( O
boost_version O
) O
; O
use-project O
/boost/architecture O
: O
libs/config/checks/architecture O
; O
local O
all-headers O
[ O
match O
. O
libs/ O
( O
. O
) O
/include/boost O
: O
[ O
glob O
libs//include/boost O
libs///include/boost O
] O
] O
; O
for O
dir O
in O
$ O
( O
all-headers O
) O
{ O
link-directory O
$ O
( O
dir O
) O
-headers O
: O
libs/$ O
( O
dir O
) O
/include/boost O
: O
<location> O
. O
; O
explicit O
$ O
( O
dir O
) O
-headers O
; O
} O
if O
$ O
( O
all-headers O
) O
{ O
constant O
boost_modularlayout O
: O
$ O
( O
all-headers O
) O
; O
} O
project O
boost O
: O
requirements O
<include> O
. O
[ O
boostcpp O
. O
architecture O
] O
[ O
boostcpp O
. O
address-model O
] O
disable O
auto-linking O
for O
all O
targets O
here O
, O
primarily O
because O
it O
caused O
troubles O
with O
v O
. O
<define>boost_all_no_lib O
used O
to O
encode O
variant O
in O
target O
name O
. O
see O
the O
\'tag\' O
rule O
below O
. O
<tag>@$ O
( O
__name__ O
) O
. O
tag O
<conditional>@handle-static-runtime O
comeau O
does O
not O
support O
shared O
lib O
<toolset>como O
: O
<link>static O
<toolset>como-linux O
: O
<define>_gnu_source O
when O
building O
docs O
within O
boost O
, O
we O
want O
the O
standard O
boost O
style O
<xsl O
: O
param>boost O
. O
defaultsboost O
<conditional>@threadapi-feature O
. O
detect O
: O
usage-requirements O
<include> O
. O
: O
default-build O
<visibility>hidden O
<threading>multi O
: O
build-dir O
bin O
. O
v O
; O
this O
rule O
is O
called O
by O
boost O
. O
build O
to O
determine O
the O
name O
of O
target O
. O
we O
use O
it O
to O
encode O
the O
build O
variant O
, O
compiler O
name O
and O
boost O
version O
in I-7
the I-7
target I-7
name I-7
. O
rule O
tag O
( O
name O
: O
type O
? O
: O
property-set O
) O
{ O
return O
[ O
boostcpp O
. O
tag B-7
$ B-7
( I-7
name I-7
) O
: O
$ O
( O
type O
) O
: O
$ O
( O
property-set O
) O
] O
; O
} O
rule O
python-tag O
( O
name O
: O
type O
? O
: O
property-set O
) O
{ O
return O
[ O
boostcpp O
. O
python-tag O
$ O
( O
name O
) O
: O
$ O
( O
type O
) O
: O
$ O
( O
property-set O
) O
] O
; O
} O
rule O
handle-static-runtime O
( O
properties O
) O
{ O
using O
static O
runtime O
with O
shared O
libraries O
is O
impossible O
on O
linux O
, O
and O
dangerous O
on O
windows O
. O
therefore O
, O
we O
disallow O
it O
. O
this O
might O
be O
drastic O
, O
but O
it O
was O
disabled O
for O
a O
while O
without O
anybody O
complaining O
. O
for O
cw O
, O
static O
runtime O
is O
needed O
so O
that O
std O
: O
: O
locale O
works O
. O
if O
<link>shared O
in O
$ O
( O
properties O
) O
<runtime-link>static O
in O
$ O
( O
properties O
) O
! O
( O
<toolset>cw O
in O
$ O
( O
properties O
) O
) O
{ O
if O
! O
$ O
( O
. O
shared-static-warning-emitted O
) O
{ O
echo O
"warning O
: O
skipping O
configuration O
linkshared O
, O
runtime-linkstatic" O
; O
echo O
"warning O
: O
this O
combination O
is O
either O
impossible O
or O
too O
dangerous" O
; O
echo O
"warning O
: O
to O
be O
of O
any O
use" O
; O
. O
shared-static-warning-emitted O
; O
} O
return O
<build>no O
; O
} O
} O
all-libraries O
[ O
match O
. O
libs/ O
( O
. O
) O
/build/ O
. O
: O
[ O
glob O
libs//build/jamfile O
. O
v O
] O
[ O
glob O
libs//build/jamfile O
] O
] O
; O
all-libraries O
[ O
sequence O
. O
unique O
$ O
( O
all-libraries O
) O
] O
; O
the O
function_types O
library O
has O
a O
jamfile O
, O
but O
it\'s O
used O
for O
maintenance O
purposes O
, O
there\'s O
no O
library O
to O
build O
and O
install O
. O
all-libraries O
[ O
set O
. O
difference O
$ O
( O
all-libraries O
) O
: O
function_types O
] O
; O
setup O
convenient O
aliases O
for O
all O
libraries O
. O
local O
rule O
explicit-alias O
( O
id O
: O
targets O
+ O
) O
{ O
alias O
$ O
( O
id O
) O
: O
$ O
( O
targets O
) O
; O
explicit O
$ O
( O
id O
) O
; O
} O
first O
, O
the O
complicated O
libraries O
: O
where O
the O
target O
name O
in O
jamfile O
is O
different O
from O
its O
directory O
name O
. O
explicit-alias O
prg_exec_monitor O
: O
libs/test/build//boost_prg_exec_monitor O
; O
explicit-alias O
test_exec_monitor O
: O
libs/test/build//boost_test_exec_monitor O
; O
explicit-alias O
unit_test_framework O
: O
libs/test/build//boost_unit_test_framework O
; O
explicit-alias O
bgl-vis O
: O
libs/graps/build//bgl-vis O
; O
explicit-alias O
serialization O
: O
libs/serialization/build//boost_serialization O
; O
explicit-alias O
wserialization O
: O
libs/serialization/build//boost_wserialization O
; O
for O
local O
l O
in O
$ O
( O
all-libraries O
) O
{ O
if O
! O
$ O
( O
l O
) O
in O
test O
graph O
serialization O
headers O
{ O
explicit-alias O
$ O
( O
l O
) O
: O
libs/$ O
( O
l O
) O
/build//boost_$ O
( O
l O
) O
; O
} O
} O
log O
has O
an O
additional O
target O
explicit-alias O
log_setup O
: O
libs/log/build//boost_log_setup O
; O
rule O
do-nothing O
{ O
} O
rule O
generate-alias O
( O
project O
name O
: O
property-set O
: O
sources O
) O
{ O
local O
action-name O
[ O
$ O
( O
property-set O
) O
. O
get O
<action> O
] O
; O
local O
m O
[ O
match O
@ O
( O
. O
) O
: O
$ O
( O
action-name O
) O
] O
; O
property-set O
[ O
property-set O
. O
empty O
] O
; O
local O
action O
[ O
new O
action O
$ O
( O
sources O
) O
: O
$ O
( O
m O
[ O
] O
) O
: O
$ O
( O
property-set O
) O
] O
; O
local O
t O
[ O
new O
notfile-target O
$ O
( O
name O
) O
: O
$ O
( O
project O
) O
: O
$ O
( O
action O
) O
] O
; O
return O
[ O
virtual-target O
. O
register O
$ O
( O
t O
) O
] O
; O
} O
generate O
headers O
: O
$ O
( O
all-headers O
) O
-headers O
: O
<generating-rule>@generate-alias O
<action>@do-nothing O
: O
: O
<include> O
. O
; O
alias O
headers O
: O
$ O
( O
all-headers O
) O
-headers O
: O
: O
: O
<include> O
. O
; O
explicit O
headers O
; O
make O
project O
ids O
of O
all O
libraries O
known O
. O
for O
local O
l O
in O
$ O
( O
all-libraries O
) O
{ O
use-project O
/boost/$ O
( O
l O
) O
: O
libs/$ O
( O
l O
) O
/build O
; O
} O
if O
[ O
path O
. O
exists O
$ O
( O
boost_root O
) O
/tools/inspect/build O
] O
{ O
use-project O
/boost/tools/inspect O
: O
tools/inspect/build O
; O
} O
if O
[ O
path O
. O
exists O
$ O
( O
boost_root O
) O
/libs/wave/tool/build O
] O
{ O
use-project O
/boost/libs/wave/tool O
: O
libs/wave/tool/build O
; O
} O
make O
the O
boost-install O
rule O
visible O
in O
subprojects O
this O
rule O
should O
be O
called O
from O
libraries\' O
jamfiles O
and O
will O
create O
two O
targets O
, O
"install" O
and O
"stage" O
, O
that O
will O
install O
or O
stage O
that O
library O
. O
the O
--prefix O
option O
is O
respected O
, O
but O
--with O
and O
--without O
options O
, O
naturally O
, O
are O
ignored O
. O
- O
libraries O
-- O
list O
of O
library O
targets O
to O
install O
. O
rule O
boost-install O
( O
libraries O
) O
{ O
boost-install O
. O
boost-install O
$ O
( O
libraries O
) O
; O
} O
creates O
a O
library O
target O
, O
adding O
autolink O
support O
and O
also O
creates O
stage O
and O
install O
targets O
via O
boost-install O
, O
above O
. O
rule O
boost-lib O
( O
name O
: O
sources O
: O
requirements O
: O
default-build O
: O
usage-requirements O
) O
{ O
autolink O
<link>shared O
: O
<define>boost_$ O
( O
name O
: O
u O
) O
_dyn_link O
; O
name I-7
boost_$ I-7
( I-7
name I-7
) O
; O
lib O
$ O
( O
name O
) O
: O
$ O
( O
sources O
) O
: O
$ O
( O
requirements O
) O
$ O
( O
autolink O
) O
: O
$ O
( O
default-build O
) O
: O
$ O
( O
usage-requirements O
) O
$ O
( O
autolink O
) O
; O
boost-install O
$ O
( O
name O
) O
; O
} O
declare O
special O
top-level O
targets O
that O
build O
and O
install O
the O
desired O
variants O
of O
the O
libraries O
. O
boostcpp O
. O
