include O
<stdio O
. O
h> O
include O
<stdlib O
. O
h> O
include O
<stdint O
. O
h> O
include O
"src/spi O
. O
h" O
define O
n_samples O
define O
spread O
define O
scale O
// O
calibration O
parameter O
int O
main O
( O
void O
) O
{ O
spi_t O
spi O
; O
spi_bit_order_t O
msb_first O
; O
uint_t O
buf O
[ O
] O
{ O
x O
} O
; O
uint_t O
buf O
[ O
] O
; O
int_t O
buf O
[ O
] O
; O
uint_t O
buf O
[ O
] O
{ O
xaa O
, O
xaa O
, O
xaa O
, O
xaa O
, O
xaa O
, O
xaa O
, O
x O
} O
; O
// O
to O
change O
the O
gain O
to O
, O
change O
the O
last O
byte O
( O
x O
) O
to O
( O
xa O
) O
or O
> O
( O
xa O
) O
char O
buffer O
[ O
] O
; O
unsigned O
char O
byte O
; O
int_t O
desired_bits O
; O
int O
i O
, O
j O
; O
int O
size O
; O
int_t O
offset O
; O
int O
nsamplesn_samples O
; O
long O
samples O
[ O
nsamples O
] O
; O
float O
spread_percent O
spread O
/ O
. O
/ O
. O
; O
float O
filter_low O
, O
filter_high O
; O
long O
tmp_avg O
; O
long O
tmp_avg O
; O
/ O
open O
spidev O
. O
with O
mode O
and O
max O
speed O
mhz O
/ O
if O
( O
spi_open O
( O
spi O
, O
"/dev/spidev O
. O
" O
, O
, O
) O
< O
) O
{ O
fprintf O
( O
stderr O
, O
"spi_open O
( O
) O
: O
%s\n" O
, O
spi_errmsg O
( O
spi O
) O
) O
; O
exit O
( O
) O
; O
} O
/ O
set_offset O
/ O
i O
; O
j O
; O
printf O
( O
"wait O
: O
getting O
tare\n" O
) O
; O
while O
( O
i<nsamples O
) O
{ O
/ O
shift O
out O
byte O
of O
x O
and O
read O
dout O
/ O
if O
( O
spi_transfer O
( O
spi O
, O
buf O
, O
buf O
, O
sizeof O
( O
buf O
) O
) O
< O
) O
{ O
fprintf O
( O
stderr O
, O
"spi_transfer O
( O
) O
: O
%s\n" O
, O
spi_errmsg O
( O
spi O
) O
) O
; O
exit O
( O
) O
; O
} O
if O
( O
buf O
[ O
] O
x O
) O
{ O
spi_transfer O
( O
spi O
, O
buf O
, O
buf O
, O
sizeof O
( O
buf O
) O
) O
; O
desired_bits O
get_bits O
( O
buf O
) O
; O
samples O
[ O
i O
] O
desired_bits O
; O
i++ O
; O
} O
} O
for O
( O
i O
; O
i<nsamples O
; O
i++ O
) O
{ O
tmp_avg O
+ O
samples O
[ O
i O
] O
; O
} O
//usleep O
( O
) O
; O
tmp_avg O
tmp_avg O
/ O
nsamples O
; O
tmp_avg O
; O
j O
; O
filter_low O
( O
float O
) O
tmp_avg O
( O
. O
- O
spread_percent O
) O
; O
filter_high O
( O
float O
) O
tmp_avg O
( O
. O
+ O
spread_percent O
) O
; O
// O
printf O
( O
"%d O
%d\n" O
, O
( O
int O
) O
filter_low O
, O
( O
int O
) O
filter_high O
) O
; O
for O
( O
i O
; O
i<nsamples O
; O
i++ O
) O
{ O
if O
( O
( O
samples O
[ O
i O
] O
< O
filter_high O
samples O
[ O
i O
] O
> O
filter_low O
) O
( O
samples O
[ O
i O
] O
> O
filter_high O
samples O
[ O
i O
] O
< O
filter_low O
) O
) O
{ O
tmp_avg O
+ O
samples O
[ O
i O
] O
; O
j++ O
; O
} O
} O
if O
( O
j O
) O
{ O
printf O
( O
"no O
data O
to O
consider O
: O
change O
the O
spread O
or O
the O
number O
of O
samples\n" O
) O
; O
exit O
( O
) O
; O
} O
offset O
tmp_avg/j O
; O
//offset O
tmp_avg O
; O
printf O
( O
"offset O
: O
%d\n" O
, O
offset O
) O
; O
printf O
( O
"starting O
. O
. O
. O
